#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to calculate the greatest common divisor (GCD) of two numbers
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

// Function to check if a number is prime
int isPrime(int n) {
    if (n <= 1) {
        return 0;
    }
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}

// Function to generate a random prime number within a range
int generatePrime(int min, int max) {
    int num;
    do {
        num = rand() % (max - min + 1) + min;
    } while (!isPrime(num));
    return num;
}

// Function to calculate the modular multiplicative inverse
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Inverse does not exist
}

int main() {
    // Step 1: Generate two distinct prime numbers, p and q
    int p = generatePrime(10, 50); // Adjust the range as needed
    int q = generatePrime(51, 100); // Adjust the range as needed

    // Step 2: Calculate n (modulus) and phi(n)
    int n = p * q;
    int phi = (p - 1) * (q - 1);

    // Step 3: Choose a public key (e, n), where 1 < e < phi(n) and gcd(e, phi(n)) = 1
    int e;
    do {
        e = rand() % (phi - 1) + 2; // Randomly select e between 2 and phi(n) - 1
    } while (gcd(e, phi) != 1);

    // Step 4: Calculate the private key (d, n), where d is the modular multiplicative inverse of e
    int d = modInverse(e, phi);

    // Message to encrypt and decrypt
    int plaintext = 42; // Replace with your message

    // Step 5: Encrypt the message using the public key (e, n)
    int ciphertext = fmod(pow(plaintext, e), n);

    // Step 6: Decrypt the ciphertext using the private key (d, n)
    int decrypted_text = fmod(pow(ciphertext, d), n);

    printf("Original Message: %d\n", plaintext);
    printf("Encrypted Message: %d\n", ciphertext);
    printf("Decrypted Message: %d\n", decrypted_text);

    return 0;
}
